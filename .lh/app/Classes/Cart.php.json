{
    "sourceFile": "app/Classes/Cart.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1642135733275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1642135733395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,104 @@\n+<?php\n+\n+namespace App\\Classes;\n+\n+use App\\Models\\Order;\n+use App\\Models\\OrderItem;\n+use App\\Models\\Product;\n+\n+class Cart\n+{\n+  protected static $name =  '__ShoppingCart';\n+  public static function add($id, $info = [])\n+  {\n+\n+    $cart = static::cart();\n+    $quantity = isset($info['quantity']) ? $info['quantity'] : 1;\n+\n+    $key  = '_' . $id;\n+    if (array_key_exists($key, $cart)) {\n+      $cart[$key]->quantity   += $quantity;\n+    } else {\n+      $product  = Product::find($id);\n+      $i  = new \\stdClass();\n+      $i->quantity = $quantity;\n+      $i->item     = $product;\n+      $i->price    = $product->price;\n+      $cart[$key]  = $i;\n+    }\n+    if (isset($info['option'])) {\n+      $cart[$key]->options = $info['option'];\n+    }\n+    static::update($cart);\n+    return static::cart();\n+  }\n+\n+\n+  public static function update($items)\n+  {\n+    session([static::$name => $items]);\n+  }\n+\n+  public static function count()\n+  {\n+    return count(static::cart());\n+  }\n+\n+  public static function total()\n+  {\n+    $total = 0;\n+    foreach (static::cart() as $item) {\n+      $total +=  $item->price * $item->quantity;\n+    }\n+    return $total;\n+  }\n+\n+  static function cal()\n+  {\n+    $total = 0;\n+    $commission = 0;\n+    dd(static::cart());\n+    foreach (static::cart() as $item) {\n+      $total +=  $item->price * $item->quantity;\n+      $commission += $item->dropship_bonus ? $total * $item->dropship_bonus / 100 : 0;\n+    }\n+    return ['total' => $total, 'ref_commission' => $commission];\n+  }\n+\n+\n+  public static function remove($id)\n+  {\n+    $items = static::cart();\n+    unset($items[$id]);\n+    static::update($items);\n+  }\n+\n+  public static function clear()\n+  {\n+    session()->forget(static::$name);\n+  }\n+\n+  public static function cart()\n+  {\n+    return session()->has(static::$name) ?  session(static::$name) : [];\n+  }\n+\n+  public static function submit($info = [])\n+  {\n+    if (!static::count()) return;\n+\n+    $info   = array_merge($info, static::cal());\n+    $order  = Order::create($info);\n+\n+    foreach (Cart::cart() as $i) {\n+      OrderItem::sell($order, $i->item,  [\n+        'quantity' =>  $i->quantity,\n+        'price'    =>  $i->price,\n+        'appends'  =>  isset($i->appends) ? isset($i->appends) : null\n+      ]);\n+    }\n+\n+    static::clear();\n+    return $order;\n+  }\n+}\n"
                },
                {
                    "date": 1642135849097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n   static function cal()\n   {\n     $total = 0;\n     $commission = 0;\n-    dd(static::cart());\n+   \n     foreach (static::cart() as $item) {\n       $total +=  $item->price * $item->quantity;\n       $commission += $item->dropship_bonus ? $total * $item->dropship_bonus / 100 : 0;\n     }\n@@ -101,108 +101,4 @@\n     static::clear();\n     return $order;\n   }\n }\n-<?php\n-\n-namespace App\\Classes;\n-\n-use App\\Models\\Order;\n-use App\\Models\\OrderItem;\n-use App\\Models\\Product;\n-\n-class Cart\n-{\n-  protected static $name =  '__ShoppingCart';\n-  public static function add($id, $info = [])\n-  {\n-\n-    $cart = static::cart();\n-    $quantity = isset($info['quantity']) ? $info['quantity'] : 1;\n-\n-    $key  = '_' . $id;\n-    if (array_key_exists($key, $cart)) {\n-      $cart[$key]->quantity   += $quantity;\n-    } else {\n-      $product  = Product::find($id);\n-      $i  = new \\stdClass();\n-      $i->quantity = $quantity;\n-      $i->item     = $product;\n-      $i->price    = $product->price;\n-      $cart[$key]  = $i;\n-    }\n-    if (isset($info['option'])) {\n-      $cart[$key]->options = $info['option'];\n-    }\n-    static::update($cart);\n-    return static::cart();\n-  }\n-\n-\n-  public static function update($items)\n-  {\n-    session([static::$name => $items]);\n-  }\n-\n-  public static function count()\n-  {\n-    return count(static::cart());\n-  }\n-\n-  public static function total()\n-  {\n-    $total = 0;\n-    foreach (static::cart() as $item) {\n-      $total +=  $item->price * $item->quantity;\n-    }\n-    return $total;\n-  }\n-\n-  static function cal()\n-  {\n-    $total = 0;\n-    $commission = 0;\n-    dd(static::cart());\n-    foreach (static::cart() as $item) {\n-      $total +=  $item->price * $item->quantity;\n-      $commission += $item->dropship_bonus ? $total * $item->dropship_bonus / 100 : 0;\n-    }\n-    return ['total' => $total, 'ref_commission' => $commission];\n-  }\n-\n-\n-  public static function remove($id)\n-  {\n-    $items = static::cart();\n-    unset($items[$id]);\n-    static::update($items);\n-  }\n-\n-  public static function clear()\n-  {\n-    session()->forget(static::$name);\n-  }\n-\n-  public static function cart()\n-  {\n-    return session()->has(static::$name) ?  session(static::$name) : [];\n-  }\n-\n-  public static function submit($info = [])\n-  {\n-    if (!static::count()) return;\n-\n-    $info   = array_merge($info, static::cal());\n-    $order  = Order::create($info);\n-\n-    foreach (Cart::cart() as $i) {\n-      OrderItem::sell($order, $i->item,  [\n-        'quantity' =>  $i->quantity,\n-        'price'    =>  $i->price,\n-        'appends'  =>  isset($i->appends) ? isset($i->appends) : null\n-      ]);\n-    }\n-\n-    static::clear();\n-    return $order;\n-  }\n-}\n"
                },
                {
                    "date": 1642135943066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,8 +58,9 @@\n     $total = 0;\n     $commission = 0;\n    \n     foreach (static::cart() as $item) {\n+      dd($item);\n       $total +=  $item->price * $item->quantity;\n       $commission += $item->dropship_bonus ? $total * $item->dropship_bonus / 100 : 0;\n     }\n     return ['total' => $total, 'ref_commission' => $commission];\n"
                },
                {
                    "date": 1642136014580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,11 +57,11 @@\n   {\n     $total = 0;\n     $commission = 0;\n    \n-    foreach (static::cart() as $item) {\n+    foreach (static::cart() as $i) {\n       dd($item);\n-      $total +=  $item->price * $item->quantity;\n+      $total +=  $i->item->price * $item->quantity;\n       $commission += $item->dropship_bonus ? $total * $item->dropship_bonus / 100 : 0;\n     }\n     return ['total' => $total, 'ref_commission' => $commission];\n   }\n"
                },
                {
                    "date": 1642136039116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,10 +59,10 @@\n     $commission = 0;\n    \n     foreach (static::cart() as $i) {\n       dd($item);\n-      $total +=  $i->item->price * $item->quantity;\n-      $commission += $item->dropship_bonus ? $total * $item->dropship_bonus / 100 : 0;\n+      $total +=  $i->price * $->quantity;\n+      $commission += $i->item->dropship_bonus ? $total * $item->dropship_bonus / 100 : 0;\n     }\n     return ['total' => $total, 'ref_commission' => $commission];\n   }\n \n"
                },
                {
                    "date": 1642136046694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n    \n     foreach (static::cart() as $i) {\n       dd($item);\n       $total +=  $i->price * $->quantity;\n-      $commission += $i->item->dropship_bonus ? $total * $item->dropship_bonus / 100 : 0;\n+      $commission += $i->item->dropship_bonus ? $total * $i->->dropship_bonus / 100 : 0;\n     }\n     return ['total' => $total, 'ref_commission' => $commission];\n   }\n \n"
                },
                {
                    "date": 1642136053741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,10 +59,10 @@\n     $commission = 0;\n    \n     foreach (static::cart() as $i) {\n       dd($item);\n-      $total +=  $i->price * $->quantity;\n-      $commission += $i->item->dropship_bonus ? $total * $i->->dropship_bonus / 100 : 0;\n+      $total +=  $i->price * $i->quantity;\n+      $commission += $i->item->dropship_bonus ? $total * $i->item->dropship_bonus / 100 : 0;\n     }\n     return ['total' => $total, 'ref_commission' => $commission];\n   }\n \n"
                }
            ],
            "date": 1642135733275,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Classes;\n\nuse App\\Models\\Order;\nuse App\\Models\\OrderItem;\nuse App\\Models\\Product;\n\nclass Cart\n{\n  protected static $name =  '__ShoppingCart';\n  public static function add($id, $info = [])\n  {\n\n    $cart = static::cart();\n    $quantity = isset($info['quantity']) ? $info['quantity'] : 1;\n\n    $key  = '_' . $id;\n    if (array_key_exists($key, $cart)) {\n      $cart[$key]->quantity   += $quantity;\n    } else {\n      $product  = Product::find($id);\n      $i  = new \\stdClass();\n      $i->quantity = $quantity;\n      $i->item     = $product;\n      $i->price    = $product->price;\n      $cart[$key]  = $i;\n    }\n    if (isset($info['option'])) {\n      $cart[$key]->options = $info['option'];\n    }\n    static::update($cart);\n    return static::cart();\n  }\n\n\n  public static function update($items)\n  {\n    session([static::$name => $items]);\n  }\n\n  public static function count()\n  {\n    return count(static::cart());\n  }\n\n  public static function total()\n  {\n    $total = 0;\n    foreach (static::cart() as $item) {\n      $total +=  $item->price * $item->quantity;\n    }\n    return $total;\n  }\n\n  static function cal()\n  {\n    $total = 0;\n    $commission = 0;\n    dd(static::cart());\n    foreach (static::cart() as $item) {\n      $total +=  $item->price * $item->quantity;\n      $commission += $item->dropship_bonus ? $total * $item->dropship_bonus / 100 : 0;\n    }\n    return ['total' => $total, 'ref_commission' => $commission];\n  }\n\n\n  public static function remove($id)\n  {\n    $items = static::cart();\n    unset($items[$id]);\n    static::update($items);\n  }\n\n  public static function clear()\n  {\n    session()->forget(static::$name);\n  }\n\n  public static function cart()\n  {\n    return session()->has(static::$name) ?  session(static::$name) : [];\n  }\n\n  public static function submit($info = [])\n  {\n    if (!static::count()) return;\n\n    $info   = array_merge($info, static::cal());\n    $order  = Order::create($info);\n\n    foreach (Cart::cart() as $i) {\n      OrderItem::sell($order, $i->item,  [\n        'quantity' =>  $i->quantity,\n        'price'    =>  $i->price,\n        'appends'  =>  isset($i->appends) ? isset($i->appends) : null\n      ]);\n    }\n\n    static::clear();\n    return $order;\n  }\n}\n"
        }
    ]
}