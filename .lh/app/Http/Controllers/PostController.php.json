{
    "sourceFile": "app/Http/Controllers/PostController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1642393862365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1642393862365,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Post;\nuse App\\Models\\Category;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Validator;\nuse App\\Classes\\Search;\n\nclass PostController extends Controller\n{\n    \n    public function page()\n    {\n        return $this->index('page');\n    }\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index($prefix = null)\n    {\n\n        //s$search = (new search($prefix))->get();\n        //$search->is =  $prefix;\n        $query  =  Post::wherePrefix($prefix);\n        $list = $query->paginate();\n        \n        $xlink = (object)[\n            'create'      => route(\"posts.create\", ['prefix' => $prefix]),\n            'categories'  => route(\"categories.index\"),\n        ];\n        return view(\n            'admin.post.index',\n            compact(\n                'query',\n                'prefix',\n                'list',\n                'xlink',\n            )\n        );\n    }\n\n    /**\n     * Show the form for creating a new resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function create(Request $request)\n    {\n        if ($request->category) {\n            $categories = Category::whereParentId($request->category)->arrange();\n            return view('admin.post.create', compact('categories'));\n        }\n        return view('admin.post.create');\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(Request $request)\n    {\n        $this->data = $request->input(); \n        $Post = Post::create($this->data);\n        return redirect()->route('posts.edit', $Post)->with('toastr', [\n            'status' => 'success', 'message' => __('Bài viết đã được tạo')        \n        ]);\n    }\n\n    /**\n     * Display the specified resource.\n     *\n     * @param  \\App\\Models\\Page  $Page\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Post $Post)\n    {\n        return empty($Post->category) ?\n            view('page.post.static', compact('Post')) :\n            view('page.post.detail', compact('Post'))->with(['category' => $Post->category]);\n    }\n\n\n    /**\n     * Show the form for editing the specified resource.\n     *\n     * @param  \\App\\Models\\Page  $Page\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function edit(Post $Post, Request $request)\n    {\n        $categories = Category::whereParentId($request->category)->arrange();\n        return view('dev.post.edit', compact('Post', 'categories'));\n    }\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\App\\Models\\Page  $Page\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(Post $Post, Request $request)\n    {\n        $this->data = $request->input();\n        //if($this->validator()->fails()) return $this->backErr();\n        $Post->update($this->data);\n        if ($request->hasFile('avatar')) {\n            $Post->storeAvatar($request->avatar);\n        }\n        return redirect()->back()->with('toastr', [\n            'status' => 'success', 'message' => __('Cập nhật bài viết thành công')\n        ]);\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     *\n     * @param  \\App\\Models\\Page  $Page\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Post $Post)\n    {\n        $Post->delete();\n        return redirect()->back()->with('toastr', [\n            'status' => 'success', 'message' => __('Đã xóa bài viết')\n        ]);\n    }\n}\n"
        }
    ]
}